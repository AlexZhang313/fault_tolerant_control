--topic_height=/state_est

--imp_detector_border_margin=5
--imp_detector_threshold=18
--vio_descriptor_use_dummy=True
--vio_kfselect_numfts_lower_thresh=40

--vio_feature_tracker_patch_size_by8=3,2
--imp_detector_max_features_per_frame=100
--vio_feature_tracker_termcrit_min_update_squared=0.05

--logtostderr=True
--vio_trace_pose=1
--log_dir=/tmp
--calib_use_single_camera=True

--vio_add_every_nth_frame_to_backend=1
--vio_ceres_block_frontend=True
--vio_use_input_queue=False
--vio_use_5pt_ransac=True

--vio_delayed_nframe_processing=false
--vio_viz_feature_tracks=False
--vio_viz_feature_tracks_colormap=0
--vio_viz_feature_tracks_length=0
--vio_viz_show_image=False
--vio_viz_level=0
--vio_viz_skip_rate=2

--vio_min_depth=0.05

--vio_ceres_gyro_saturation=40

--vio_ceres_verbose=false
--vio_landmark_distance_weight=10.0
--vio_landmark_location_weight=0.0
--vio_ceres_iterations=2
--vio_imu_covariance_scale=1.0

--vio_estimated_landmarks_to_frontend=true
--vio_additional_triangulation=false
--vio_height_triangulation=true

 #default is 3 (try with 10)
--vio_ceres_sliding_window_size=2
--vio_ceres_numkeyframes=3

--vio_rescale_intrinsics_for_distortion=false
--vio_viz_show_image=false
--vio_viz_show_image_statistics=true

--vio_ceres_add_velocity_prior=true
--vio_ceres_marginalize=true
--vio_max_num_tracks_per_update=100

--vio_disable_marginalization=true
--vio_optimize_landmark_once=false
--vio_do_fixation=true


################ ALL INTERESTING FLAGS FOR FINE TUNING PERFORMANCE ######################################
#  Flags for VIO specially designed for spinning quadrotor after rotor failure
#    -vio_do_fixation (Fix positions and yaw of the last frame in the time window)
#       type: bool  default: true
#    -vio_optimize_landmark_once (Fix landmarks in the map once been solved in a single key frame)
#       type: bool  default: false
#    -vio_disable_marginalization: (Disable marginalization)
#       type: bool  default: true
#    -vio_landmark_distance_weight: (Weight of the term in the backend cost function constraining distance from the camera to the landmarks)
#       type: double default: 5.0
#    -vio_landmark_location_weight:  (Weight of the in the backend cost function forcing all landmraks to be on the ground)
#       type: double default: 0.0
#    -vio_estimated_landmarks_to_frontend (Use landmark position from backend in the frontend)
#       type: bool  default: true
#    
#  Flags below are in common with original zurich_eye SLAM


#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_ceres/src/vio_ceres_backend_interface.cpp:
#    -acc_bias_random_walk (Accelerometer bias prior noise density [m/s^2])
#      type: double default: 0.10000000000000001
#    -acc_noise_density (Accelerometer noise density [m/s^2/sqrt(Hz)])
#      type: double default: 0.0080000000000000002
#    -extrinsics_sigma_abs_orientation (Absolute orientation sigma of camera
#      extrinsics w.r.t to IMU Frame) type: double default: 0
#    -extrinsics_sigma_abs_translation (Absolute translation sigma of camera
#      extrinsics w.r.t to IMU Frame) type: double default: 0
#    -extrinsics_sigma_rel_orientation (Relative translation sigma (temporal) of
#      camera extrinsics) type: double default: 0
#    -extrinsics_sigma_rel_translation (Relative translation sigma (temporal) of
#      camera extrinsics) type: double default: 0
#    -gyro_bias_random_walk (Gyro bias prior noise density [rad/s]) type: double
#      default: 0.029999999999999999
#    -gyro_noise_density (Gyro noise density [rad/s/sqrt(Hz)]) type: double
#      default: 0.0011999999999999999
#    -swe_imu_rate (IMU Rate [Hz]) type: double default: 200
#    -vio_ceres_accel_saturation (Acceleration saturation [m/s^2]) type: double
#      default: 176
#    -vio_ceres_add_velocity_prior (Add velocity priors. [Experimental])
#      type: bool default: false
#    -vio_ceres_gravity (Earth graviational acceleration [m/s^2]) type: double
#      default: 9.8100000000000005
#    -vio_ceres_gyro_saturation (Gyro saturation [rad/s]) type: double
#      default: 7.7999999999999998
#    -vio_ceres_max_optimization_time (Maximum time used to optimize [s]. Set
#      negative to always do the maximum number of iterations.) type: double
#      default: -1
#    -vio_ceres_sigma_accel_drift (Accelerometer drift noise density
#      [m/s^3/sqrt(Hz)]) type: double default: 4.0000000000000003e-05
#    -vio_ceres_sigma_gyro_drift (Gyro drift noise density [rad/s^2/sqrt(Hz)])
#      type: double default: 3.9999999999999998e-06
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_ceres/src/vio_ceres_node.cpp:
#    -vio_ceres_iterations (Maximum number of iterations.) type: int32
#      default: 3
#    -vio_ceres_marginalize (Apply marginalization?) type: bool default: true
#    -vio_ceres_num_threads (Number of threads in ceres backend) type: int32
#      default: 1
#    -vio_ceres_numkeyframes (Number of keyframes of ceres backend) type: int32
#      default: 5
#    -vio_ceres_sliding_window_size (Sliding window size of ceres backend.)
#      type: int32 default: 3
#    -vio_ceres_verbose (Output ceres optimization progress.) type: bool
#      default: false
#
#
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/feature_tracker.cpp:
#    -vio_feature_tracker_patch_size_by8 (Patch size for each pyramid in feature
#      tracker (in multiples of 8!)) type: string default: "4,4"
#    -vio_feature_tracker_termcrit_min_update_squared (Minimum parameter update
#      in KLT to consider tracking converged.) type: double
#      default: 0.029999999999999999
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/frontend_api.cpp:
#    -vio_use_split_imu_stream (Does the rosbag use the unsynchronized split imu
#      topics?) type: bool default: false
#    -vio_use_svo_frontend (Use the Semi-direct Visual Odometry frontend or
#      standard KLT tracking with RANSAC.) type: bool default: true
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/frontend_base.cpp:
#    -noise_event_rate (Events per second regarded as noise.) type: int32
#      default: 20000
#    -vio_activate_backend (Use visual-inertial backend.) type: bool
#      default: true
#    -vio_add_every_nth_frame_to_backend (Add every n-th non-Keyframe to
#      backend.) type: int32 default: -1
#    -vio_disparity_median_for_static_motion_classification (Max disparity such
#      that motion is classified as static [px].) type: double default: 1.75
#    -vio_do_motion_correction (Motion correct the event images using the
#      current camera motion and scene structure.) type: bool default: true
#    -vio_frame_norm_factor (Normalization factor for event frames) type: double
#      default: 3
#    -vio_frame_size (Frame size in milliseconds, or number of events)
#      type: int64 default: 10
#    -vio_gyr_bias_init_x (Gyro bias [temporary].) type: double default: 0
#    -vio_gyr_bias_init_y (Gyro bias [temporary].) type: double default: 0
#    -vio_gyr_bias_init_z (Gyro bias [temporary].) type: double default: 0
#    -vio_log_performance (Log additional performance statistics, e.g., number
#      of tracked features.) type: bool default: false
#    -vio_max_landmarks (Maximum number of landmarks we store in the map.)
#      type: uint64 default: 1000
#    -vio_ransac_relpose_thresh_px (Relative pose RANSAC reprojection error
#      threshold [px].) type: double default: 2
#    -vio_use_5pt_ransac (Use 5-point ransac. Alternative is 2-point RANSAC with
#      gyro prior.) type: bool default: false
#    -vio_use_integration_time (Build frames with a fixed integration time, or
#      fixed number of events.) type: bool default: true
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/frontend_gflags.cpp:
#    -vio_delayed_nframe_processing (Optimize frame_km1 and not frame_k (SWE
#      default).) type: bool default: true
#    -vio_max_depth (Depth range maximum [m]) type: double default: 50
#    -vio_max_tracked_features_per_frame (Maximum number of features per frame
#      that we want to match.) type: uint64 default: 120
#    -vio_median_depth (Depth range average [m]) type: double default: 6
#    -vio_min_depth (Depth range minimum [m]) type: double
#      default: 0.29999999999999999
#    -vio_min_tracked_features_total (Numer of tracked features in total.)
#      type: uint64 default: 300
#    -vio_only_use_converged_seeds (Only use converged seeds for sparse image
#      alignment and pose optimization.) type: bool default: true
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/frontend_svo.cpp:
#    -vio_depth_at_first_frame (Vision-only monocular: Rescale map after
#      initialization to have this depth [m].) type: double default: 2
#    -vio_init_disparity (Minimum disparity to initialize the monocular tracking
#      [pixels].) type: double default: 20
#    -vio_min_features (Minimum number of features for tracking.) type: uint64
#      default: 70
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/keyframe_selection.cpp:
#    -vio_first_n_frames_as_keyframes (Add the first n frames as KF.)
#      type: int32 default: 0
#    -vio_kfselect_criterion (0: Downlooking, 1: Forward) type: int32 default: 1
#    -vio_kfselect_every_nth_frame (Select a new keyframe every n'th time.)
#      type: int32 default: -1
#    -vio_kfselect_min_disparity (Minimum disparity to select a new keyframe
#      [pixels].) type: double default: 30
#    -vio_kfselect_min_dist (Minimum Euclidean distance between frames for a new
#      Keyframe [m].) type: double default: 0.12
#    -vio_kfselect_min_every_nth_frame (At least select a new keyframe every
#      n'th time.) type: int32 default: -1
#    -vio_kfselect_min_num_frames_between_kfs (Minimum number of frames between
#      keyframes.) type: int32 default: 0
#    -vio_kfselect_numfts_lower_thresh (Force key-frame selection if we fall
#      below this number of features.) type: uint64 default: 90
#    -vio_kfselect_numfts_upper_thresh (If we track more than this amount of
#      features, we will never select  a new keyframe.) type: uint64
#      default: 180
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/landmarks_reprojector.cpp:
#    -vio_reprojector_limit_num_features (Limit number of projected points in
#      reprojector.) type: bool default: true
#    -vio_reprojector_min_quality_to_project (Minimum quality of a seed to track
#      it in the reprojector. Quality is defined as the number of successful
#      projections minus the number of failed projections.) type: int32
#      default: 2
#    -vio_reprojector_pyr_alignment (Use a pyramidal alignment in the
#      reprojector if the alignment of a small patch fails to converge.)
#      type: bool default: true
#    -vio_reprojector_ratio_to_project_seeds (If we fail to match this ratio of
#      vio_max_tracked_features_per_frame , then we also try to match seed
#      landmarks.) type: double default: 0.80000000000000004
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/refinement.cpp:
#    -vio_pose_optim_lambda_pos (How much we trust the constant velocity model
#      for the position.) type: double default: 0
#    -vio_pose_optim_lambda_rot (How much we trust the gyroscope.) type: double
#      default: 0
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/sparse_image_align.cpp:
#    -vio_sparse_img_align_lambda_pos (How much we trust the constant velocity
#      model for the position.) type: double default: 0
#    -vio_sparse_img_align_lambda_rot (How much we trust the gyroscope.)
#      type: double default: 0
#    -vio_sparse_img_align_max_level (Highest level in pyramid for sparse image
#      alignment.) type: int32 default: -1
#    -vio_sparse_img_align_min_level (Lowest level in pyramid for sparse image
#      alignment.) type: int32 default: -1
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/applications/ze_vio_frontend/src/track_extractor.cpp:
#    -vio_favor_equal_number_of_tracks_per_frame (Favor a n equal number of new
#      persistent tracks in every frame.) type: bool default: false
#    -vio_max_num_tracks_per_update (Max number of landmarks to add to back-end
#      optimization per keyframe.) type: int32 default: 50
#    -vio_min_parallax_deg (Minimum parallax threshold to use a landmark in the
#      back-end optimization.) type: double default: 0.5
#    -vio_num_obs_for_persistent (Number of observations in feature-track to
#      classify landmark as persistent.) type: int32 default: 10
#
#
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/common/ze_cameras/src/camera_rig.cpp:
#    -calib_filename (Camera calibration file.) type: string default: ""
#    -calib_ignore_distortion (Whether to ignore or not the camera distortion)
#      type: bool default: false
#    -calib_use_single_camera () type: bool default: false
#    -mask_cam0 (Mask for camera 0) type: string default: ""
#    -mask_cam1 (Mask for camera 1) type: string default: ""
#    -mask_cam2 (Mask for camera 2) type: string default: ""
#    -mask_cam3 (Mask for camera 3) type: string default: ""
#
#
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/common/ze_data_provider/src/camera_imu_synchronizer_base.cpp:
#    -data_interval_between_event_packets (What is the interval between two
#      event packets? Specified either in milliseconds if data_use_time_interval
#      = true, or number of events if false.) type: int32 default: 10000
#    -data_size_augmented_event_packet (What is the size of each augmented event
#      packet, im milliseconds?) type: int32 default: 100
#    -data_sync_init_skip_n_frames (How many frames should be skipped at the
#      beginning.) type: int32 default: 0
#    -data_sync_stop_after_n_frames (How many frames should be processed?)
#      type: int32 default: -1
#    -data_use_time_interval (Specify whether events packets are created at a
#      fixed (time) rate (true) or fixed event rate (false)) type: bool
#      default: false
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/common/ze_data_provider/src/data_provider_factory.cpp:
#    -bag_filename (Name of bagfile in data_dir.) type: string
#      default: "dataset.bag"
#    -data_dir (Directory for csv dataset.) type: string default: ""
#    -data_source ( 0: CSV, 1: Rosbag, 2: Rostopic) type: int32 default: 1
#    -num_accels (Number of Accelerometers used in the pipeline.) type: uint64
#      default: 0
#    -num_dvs (Number of event cameras used in the pipeline.) type: uint64
#      default: 1
#    -num_gyros (Number of Gyroscopes used in the pipeline.) type: uint64
#      default: 0
#    -num_imus (Number of IMUs used in the pipeline.) type: uint64 default: 1
#    -timeshift_cam_imu (Delay between cam and IMU timestamps.) type: double
#      default: 0
#    -topic_acc0 () type: string default: "/acc0"
#    -topic_acc1 () type: string default: "/acc1"
#    -topic_acc2 () type: string default: "/acc2"
#    -topic_acc3 () type: string default: "/acc3"
#    -topic_cam0 () type: string default: "/cam0/image_raw"
#    -topic_cam1 () type: string default: "/cam1/image_raw"
#    -topic_cam2 () type: string default: "/cam2/image_raw"
#    -topic_cam3 () type: string default: "/cam2/image_raw"
#    -topic_dvs0 () type: string default: "/dvs0/events"
#    -topic_dvs1 () type: string default: "/dvs1/events"
#    -topic_dvs2 () type: string default: "/dvs2/events"
#    -topic_dvs3 () type: string default: "/dvs3/events"
#    -topic_gyr0 () type: string default: "/gyr0"
#    -topic_gyr1 () type: string default: "/gyr1"
#    -topic_gyr2 () type: string default: "/gyr2"
#    -topic_gyr3 () type: string default: "/gyr3"
#    -topic_imu0 () type: string default: "/imu0"
#    -topic_imu1 () type: string default: "/imu1"
#    -topic_imu2 () type: string default: "/imu2"
#    -topic_imu3 () type: string default: "/imu3"
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/common/ze_data_provider/src/data_provider_rosbag.cpp:
#    -data_source_start_time_s (Start time in seconds) type: double default: 0
#    -data_source_stop_after_n_frames (How many frames should be processed?)
#      type: int32 default: -1
#    -data_source_stop_time_s (Stop time in seconds) type: double default: 0
#    -skip_rate (Use every n-th frame.) type: int32 default: 1
#
#
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/common/ze_vio_common/src/frame.cpp:
#    -vio_frame_pyramid_levels (Number of levels in image pyramid) type: uint64
#      default: 3
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/common/ze_vio_common/src/landmark_triangulation.cpp:
#    -vio_landmark_triangulate_purge_floor (Remove all landmarks that are [m]
#      below the body. Inactive if value is negative.) type: double default: -1
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/common/ze_vio_common/src/vio_visualizer.cpp:
#    -vio_trace_pose () type: bool default: true
#    -vio_viz_feature_tracks () type: bool default: false
#    -vio_viz_feature_tracks_colormap (OpenCV colormap for feature tracks)
#      type: int32 default: 1
#    -vio_viz_feature_tracks_length (Limit length of feature track) type: uint64
#      default: 0
#    -vio_viz_level (pyramid level to visualize) type: int32 default: 0
#    -vio_viz_marker_scale () type: double default: 1
#    -vio_viz_publish_T_G_B () type: bool default: false
#    -vio_viz_show_image () type: bool default: true
#    -vio_viz_show_image_statistics () type: bool default: true
#    -vio_viz_show_stereo_matches () type: bool default: false
#    -vio_viz_skip_rate (skip images for visualization) type: int32 default: 1
#    -vio_viz_sleep (sleep) type: int32 default: 1
#
#
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/imp/imp_features/src/feature_descriptor.cpp:
#    -vio_descriptor_use_dummy () type: bool default: false
#
#  Flags from /home/tonirv/ws_zurich_eye/src/zurich_eye/imp/imp_features/src/feature_detector.cpp:
#    -imp_brisk_absolute_threshold (Absolute threshold for BRISK.) type: int32
#      default: 45
#    -imp_brisk_uniformity_radius (Uniformity radius for BRISK.) type: int32
#      default: 0
#    -imp_detector_border_margin (Pixel margin at the border of the image in
#      which no features are to be extracted. Set it to 30 to avoid removal of
#      features when descriptors are also extracted.) type: int32 default: 8
#    -imp_detector_grid_size (Some detectors {FAST} use a bucketing of the image
#      to ensure a uniform distribution of features. The grid-size specifies the
#      width and height of each bucket in pixels.) type: int32 default: 32
#    -imp_detector_max_features_per_frame (Maximum number of features to extract
#      per frame.) type: int32 default: 300
#    -imp_detector_name (Options: {FAST, BRISK}) type: string default: "FAST"
#    -imp_detector_num_octaves (Number of pyramid levels in which features are
#      extracted.) type: int32 default: 3
#    -imp_detector_threshold (Absolute threshold for FAST.) type: int32
#      default: 10
